// GameUI.jsx
import React from 'react';

// Icons (using emojis as placeholders because external icon libraries are not directly supported here)
const ClearIcon = 'üóëÔ∏è';
const SubmitIcon = '‚úÖ';
const PlaceLineIcon = 'üìè'; // Ruler emoji for placing line
const DrawingModeIcon = '‚úèÔ∏è'; // Pencil emoji for drawing mode

/**
 * Presentational component for the Exquisite Corpse game user interface.
 * @param {object} props - The props for the component.
 * @param {string} props.gameCode - The game code being used.
 * @param {string | null} props.generatedGameCode - The game code if it was generated by this player.
 * @param {string} props.message - Current message to display to the player.
 * @param {number} props.playerCount - Current number of players in the room.
 * @param {string} props.currentSegmentName - The name of the current segment to draw.
 * @param {boolean} props.canDraw - Whether the player is allowed to draw.
 * @param {boolean} props.isWaitingForOthers - Whether the player is waiting for others to submit.
 * @param {boolean} props.isGameOver - Whether the game has ended.
 * @param {string | null} props.finalArtwork - Data URL of the first final artwork.
 * @param {string | null} props.finalArtwork2 - Data URL of the second final artwork.
 * @param {React.RefObject<HTMLCanvasElement>} props.drawingCanvasRef - Ref for the main drawing canvas.
 * @param {React.RefObject<HTMLCanvasElement>} props.overlayCanvasRef - Ref for the overlay canvas (for red line).
 * @param {boolean} props.hasDrawnSomething - Whether the player has drawn anything in the current segment.
 * @param {boolean} props.isPlacingRedLine - Whether the player is in red line placement mode.
 * @param {number} props.redLineY - The current Y position of the red line.
 * @param {number | null} props.previousRedLineY - The Y position of the red line from the previous segment.
 * @param {() => void} props.handleClearCanvas - Function to clear the canvas.
 * @param {() => void} props.handleSubmitSegment - Function to submit the current segment.
 * @param {() => void} props.createGame - Function to create a new game.
 * @param {() => void} props.joinGame - Function to join an existing game.
 * @param {() => void} props.handlePlayAgain - Function to reset game state and play again.
 * @param {React.Dispatch<React.SetStateAction<string>>} props.setGameCode - Setter for gameCode input.
 * @param {() => void} props.toggleRedLinePlacement - Function to toggle red line placement mode.
 * @param {boolean} props.isDrawing - Whether the player is currently drawing (mouse down/touch active).
 * @param {number} props.currentSegmentIndex - The index of the current segment.
 * @param {number} props.TOTAL_SEGMENTS - Total number of segments in the game.
 * @param {number} props.CANVAS_WIDTH - Width of the canvas.
 * @param {number} props.CANVAS_HEIGHT - Height of the canvas.
 * @param {number} props.PEEK_HEIGHT - Height of the peek area.
 */
function GameUI({
	gameCode,
	generatedGameCode,
	message,
	playerCount,
	currentSegmentName,
	canDraw,
	isWaitingForOthers,
	isGameOver,
	finalArtwork,
	finalArtwork2,
	drawingCanvasRef,
	overlayCanvasRef,
	hasDrawnSomething,
	isPlacingRedLine,
	redLineY,
	previousRedLineY,
	handleClearCanvas,
	handleSubmitSegment,
	createGame,
	joinGame,
	handlePlayAgain,
	setGameCode,
	toggleRedLinePlacement,
	isDrawing,
	currentSegmentIndex,
	TOTAL_SEGMENTS,
	CANVAS_WIDTH,
	CANVAS_HEIGHT,
	PEEK_HEIGHT,
	handleStartDrawing, // Added from useCanvasDrawing
	handleDraw, // Added from useCanvasDrawing
	handleStopDrawing, // Added from useCanvasDrawing
}) {
	const isLastSegment = currentSegmentIndex === TOTAL_SEGMENTS - 1;

	// Determine if submit button should be enabled
	const canSubmitSegment =
		canDraw &&
		hasDrawnSomething && // Must have drawn something
		!isWaitingForOthers &&
		!isGameOver &&
		(!isDrawing || isPlacingRedLine); // Can submit if not actively drawing OR if in line placing mode (where isDrawing indicates dragging the line)

	const getRedLineIndicatorText = () => {
		if (!hasDrawnSomething) {
			return 'Draw your segment!';
		}
		if (isPlacingRedLine) {
			return 'Place the red line to mark the end of your segment.';
		}
		if (!isLastSegment) {
			// Only show this if not the last segment
			return "Click 'Done Drawing' to place the red line.";
		}
		return ''; // For the last segment, no special red line instruction
	};

	return (
		<div className="relative min-h-screen bg-gradient-to-br from-purple-800 to-indigo-800 text-white flex flex-col items-center justify-center p-4">
			<h1 className="text-5xl font-extrabold mb-8 text-center leading-tight drop-shadow-lg">
				Exquisite Corpse
			</h1>

			{!generatedGameCode && !gameCode && !hasJoinedGame ? (
				// Initial Screen: Join or Create Game
				<div className="bg-white p-8 rounded-2xl shadow-xl max-w-md w-full text-center text-gray-800">
					<h2 className="text-3xl font-bold mb-6 text-purple-700">
						Start a New Game
					</h2>
					<div className="space-y-4">
						<input
							type="text"
							placeholder="Enter Game Code (e.g., ABCDEF)"
							className="w-full p-3 mb-4 border border-gray-300 rounded-lg text-lg focus:ring-purple-500 focus:border-purple-500 uppercase"
							value={gameCode}
							onChange={(e) =>
								setGameCode(e.target.value.toUpperCase())
							}
							maxLength={6}
						/>
						<button
							onClick={joinGame}
							className="w-full bg-blue-600 text-white py-3 rounded-xl text-xl font-semibold hover:bg-blue-700 transition duration-300 shadow-md"
						>
							Join Game
						</button>
						<div className="relative flex items-center justify-center my-6">
							<div className="flex-grow border-t border-gray-300"></div>
							<span className="flex-shrink mx-4 text-gray-500 text-lg">
								OR
							</span>
							<div className="flex-grow border-t border-gray-300"></div>
						</div>
						<button
							onClick={createGame}
							className="w-full bg-purple-600 text-white py-3 rounded-xl text-xl font-semibold hover:bg-purple-700 transition duration-300 shadow-md"
						>
							Create New Game
						</button>
					</div>
					<p className="mt-6 text-xl font-medium text-purple-600">
						{message}
					</p>
				</div>
			) : (
				// Game Screen
				<div className="relative w-full h-full flex flex-col items-center justify-center">
					{/* Game Info at Top */}
					<div className="absolute top-4 left-4 right-4 flex justify-between items-start z-20">
						<div className="bg-white text-gray-800 px-4 py-2 rounded-lg shadow-md">
							<p className="text-xl font-semibold">
								Segment: {currentSegmentName}
							</p>
						</div>
						<div className="bg-white text-gray-800 px-4 py-2 rounded-lg shadow-md text-right">
							<p className="text-lg">
								Code: {generatedGameCode || gameCode}
							</p>
							<p className="text-lg">
								Players: {playerCount} / {TOTAL_SEGMENTS}
							</p>
						</div>
					</div>

					{/* Main Canvas Area */}
					{!isGameOver && (
						<div
							className="relative bg-white border-4 border-blue-400 rounded-lg shadow-2xl overflow-hidden"
							style={{
								width: CANVAS_WIDTH,
								height: CANVAS_HEIGHT,
							}}
						>
							{/* Main Drawing Canvas */}
							<canvas
								ref={drawingCanvasRef}
								width={CANVAS_WIDTH}
								height={CANVAS_HEIGHT}
								className={`absolute top-0 left-0 rounded-lg ${
									canDraw && !isWaitingForOthers
										? 'cursor-crosshair'
										: 'cursor-not-allowed'
								}`}
								onMouseDown={handleStartDrawing}
								onMouseMove={handleDraw}
								onMouseUp={handleStopDrawing}
								onMouseLeave={handleStopDrawing}
								onTouchStart={handleStartDrawing}
								onTouchMove={handleDraw}
								onTouchEnd={handleStopDrawing}
								onTouchCancel={handleStopDrawing}
								style={{ touchAction: 'none' }} // Prevent scrolling/zooming
							></canvas>

							{/* Previous segment peek area (top PEEK_HEIGHT portion of receivedCanvasImage) */}
							{receivedCanvasImage &&
								previousRedLineY !== null && (
									<div
										className="absolute top-0 left-0"
										style={{
											width: CANVAS_WIDTH,
											height: PEEK_HEIGHT,
											overflow: 'hidden',
											pointerEvents: 'none', // Allow events to pass through
											zIndex: 1, // Layer above drawing canvas
										}}
									>
										<img
											src={receivedCanvasImage}
											alt="Previous Segment Peek"
											style={{
												width: '100%',
												height: 'auto', // Keep aspect ratio
												transform: `translateY(-${previousRedLineY}px)`, // Adjust to show only the peek part
											}}
										/>
									</div>
								)}

							{/* Overlay Canvas for Red Line (interactive, on top of drawing) */}
							<canvas
								ref={overlayCanvasRef}
								width={CANVAS_WIDTH}
								height={CANVAS_HEIGHT}
								className={`absolute top-0 left-0 ${
									isPlacingRedLine
										? 'cursor-ns-resize'
										: 'pointer-events-none'
								}`}
								onMouseDown={
									isPlacingRedLine
										? handleStartDrawing
										: undefined
								} // Reuse drawing start for red line drag
								onMouseMove={
									isPlacingRedLine ? handleDraw : undefined
								} // Reuse drawing draw for red line drag
								onMouseUp={
									isPlacingRedLine
										? handleStopDrawing
										: undefined
								} // Reuse drawing stop for red line drag
								onMouseLeave={
									isPlacingRedLine
										? handleStopDrawing
										: undefined
								} // Reuse drawing stop for red line drag
								onTouchStart={
									isPlacingRedLine
										? handleStartDrawing
										: undefined
								}
								onTouchMove={
									isPlacingRedLine ? handleDraw : undefined
								}
								onTouchEnd={
									isPlacingRedLine
										? handleStopDrawing
										: undefined
								}
								onTouchCancel={
									isPlacingRedLine
										? handleStopDrawing
										: undefined
								}
								style={{ touchAction: 'none', zIndex: 2 }}
							></canvas>
						</div>
					)}

					{/* Messages and Controls */}
					<p className="text-xl font-semibold text-white bg-gray-800 bg-opacity-75 p-2 rounded-lg mt-4 mb-4 inline-block z-20">
						{message}
					</p>

					{isWaitingForOthers && (
						<div className="absolute inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center rounded-lg text-white text-3xl font-bold text-center p-4 z-30">
							<p>
								Submitted! Waiting for other player to submit
								their segment...
							</p>
						</div>
					)}

					{/* Clear and Complete/Submit Buttons (Bottom Right) */}
					{!isGameOver && !isWaitingForOthers && (
						<div className="absolute bottom-4 right-4 flex space-x-4 z-20">
							<button
								onClick={handleClearCanvas}
								className={`p-4 rounded-full shadow-lg transition-colors duration-300 text-3xl
                                    ${
										canDraw
											? 'bg-red-500 hover:bg-red-600'
											: 'bg-gray-400 cursor-not-allowed'
									}`}
								disabled={
									!canDraw || isDrawing || isPlacingRedLine
								}
								title="Clear your drawing"
							>
								{ClearIcon}
							</button>

							{!isLastSegment &&
								hasDrawnSomething &&
								!isPlacingRedLine && (
									<button
										onClick={toggleRedLinePlacement}
										className={`p-4 rounded-full shadow-lg transition-colors duration-300 text-3xl
                                        ${
											canDraw && hasDrawnSomething
												? 'bg-indigo-500 hover:bg-indigo-600'
												: 'bg-gray-400 cursor-not-allowed'
										}`}
										disabled={
											!canDraw ||
											isDrawing ||
											isPlacingRedLine
										}
										title="Place the red line"
									>
										{PlaceLineIcon}
									</button>
								)}

							<button
								onClick={handleSubmitSegment}
								className={`p-4 rounded-full shadow-lg transition-colors duration-300 text-3xl
                                    ${
										canSubmitSegment
											? 'bg-green-600 hover:bg-green-700'
											: 'bg-gray-400 cursor-not-allowed'
									}`}
								disabled={!canSubmitSegment}
								title={
									isLastSegment
										? 'Submit Final Artwork'
										: 'Submit Segment'
								}
							>
								{SubmitIcon}
							</button>
						</div>
					)}

					{isGameOver && (
						<div className="absolute inset-0 bg-purple-900 bg-opacity-90 flex flex-col items-center justify-center z-40 p-4">
							<h2 className="text-5xl font-extrabold text-white mb-6 animate-bounce">
								Game Over!
							</h2>
							<div className="flex flex-col md:flex-row items-center space-y-8 md:space-y-0 md:space-x-8 mb-8">
								{finalArtwork && (
									<div className="bg-white p-2 rounded-lg shadow-xl">
										<img
											src={finalArtwork}
											alt="Final Combined Artwork 1"
											className="max-w-full h-auto border-4 border-purple-500 rounded-lg"
										/>
										<p className="text-center text-gray-800 font-semibold mt-2">
											Artwork 1
										</p>
									</div>
								)}
								{finalArtwork2 && (
									<div className="bg-white p-2 rounded-lg shadow-xl">
										<img
											src={finalArtwork2}
											alt="Final Combined Artwork 2"
											className="max-w-full h-auto border-4 border-purple-500 rounded-lg"
										/>
										<p className="text-center text-gray-800 font-semibold mt-2">
											Artwork 2
										</p>
									</div>
								)}
							</div>
							<button
								onClick={handlePlayAgain}
								className="mt-6 bg-purple-700 text-white py-3 px-10 rounded-full text-xl font-bold hover:bg-purple-800 transition duration-300 shadow-lg"
							>
								Play Again
							</button>
						</div>
					)}
				</div>
			)}
		</div>
	);
}

export default GameUI; // Export for use in index.jsx (App.jsx)
